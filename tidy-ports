#!/bin/sh
#
#	tidy-ports
#
#	Remove the inactive ports from the current MacPorts installation
#	
#   Â© 2012 Alan Staniforth
#
#	Version 1.0
#
#	Invoke thus:
#
#	./tidy-ports	[-h|-v] | [PORT_NAME PORT_VERSION] ...
#

# Version
TIDY_VERS=1.0

### Set up.
# Set trap to allow abort on signal: 
trap 'echo "Interrupted by signal" >&2; exit' 1 2 3 15

### Constants

### Variables
NO_EXEC=1 							# flag to control whether to exit after parsing options/params
CLI_PORT=1							# flag if a port was specified on the command line; 1 = no, true = yes
LIST_ONLY=1							# flag if should only list inactive ports; 1 = no, 0 = yes
VERBOSE=1							# flag if verbose output required; 1 = no, 0 = yes
declare -a inactive_port_list 		# declare an array - not strictly necessary
inactive_port_count=0				# count of entries in the array


function my_echo () {
	# print message to standard out, but, if not in verbose mode, only do so if 
	# $2 is 0
	if [[ $VERBOSE -eq 1 ]] ; then
		if [[ $2 -eq 0 ]] ; then
			echo "==> $1"
		fi
	else
		echo "==> $1"
	fi
}

### Process the options if any

if test $# -ne 0 ; then
	### Options
	while test $# -gt 0;
	do
		### Get the option flag and switch on that basis
		case "$1" in
			-*) FLAG="$1" 
				case "$FLAG" in
					-d) 
						### verbose output
						VERBOSE=0
						my_echo "verbose messages enabled..." 1
					;;
					-h) 
						### Usage information
						echo "Usage: ./tidy-ports [-d] [PORT_NAME PORT_VERSION] ..."
						echo "Usage: ./tidy-ports [-d] [-l]"
						echo "Usage: ./tidy-ports -h"
						echo "Usage: ./tidy-ports -v"
						echo ""
						echo "Options:"
						echo "    -d        Verbose output."
						echo "    -h        Print this usage summary."
						echo "    -l        List the inactive ports, don't uninstall them."
						echo "    -v        Print tool version."
						echo ""
						echo "Description:"
						echo "    Remove inactive ports from the current MacPorts installation."
						echo "    The script will scan the installed ports list for inactive ones"
						echo "    and then uninstalls them."
						echo ""
						echo "    Alternatively you can specify one or more ports to uninstall on"
						echo "    the command line. You must give both the port name and its "
						echo "    identifying version string (always begins with an '@' symbol."
						echo ""
						NO_EXEC=true
						break
					;;
					-l) 
						### list only
						LIST_ONLY=0
					;;
					-v) 
						### version
						echo "$TIDY_VERS"
						NO_EXEC=true
						break
					;;
					-*) echo "Usage: "$1" not understood!"
						echo "Use sw-bind -h for usage information"
						NO_EXEC=true
						break
					;;
				esac
			;;
			*) 
				### looks like a port specified on the command line
				# get the port name
				PORT_NAME="$1"
				# get the port version
				shift
				PORT_VERSION="$1"
				# add the port info the inactive port list 
				port_info="${PORT_NAME} ${PORT_VERSION}"
				inactive_port_list[$inactive_port_count]="${port_info}"
				let "inactive_port_count += 1"
				CLI_PORT=true
				# Check if no version info was specified. Hopefully this will also trap a few
				# other errors
				if [[ "${PORT_VERSION}" = "" ]] ; then
					echo "Usage: When specifying a port for removal you must also specify a version string."
					echo "Use beep -h for usage information"
					NO_EXEC=true
				fi
				break
			;;
		esac
		shift
	done
fi

### Bale out if bad option or not called to build, just for info

if [[ $NO_EXEC -eq 0 ]] ; then
	exit
fi

### Actual functionality implemented here.

# If no port has been specified on the command line then we need to scan the installed port list
if [[ ${#inactive_port_list[*]} -eq 0 ]] ; then
	echo "==> Scanning for inactive ports..."
	
	### get a list of the currently installed ports, both active and deactivated.
	portlist="`port installed`"
	skip_first_line=1
	
	### What follows was originally written like this:
	# 
	# echo "${portlist}" |
	# while read port_info
	# do
	# 	...
	# done
	# 
	# Unfortunately there is a problem with this. Processes put together with a pipe are 
	# executed in subshells (and therefore have their own environment). Whatever happens 
	# within the while does not affect anything outside of the pipe. So the variables 
	# manipulated within the while are purely local to that subshell environmant and the
	# same named variables in the script are not affected
	# 
	# Below are two ways to fix this. I have kept both for the sake of future reference 
	# with one commented out. I chose the active one because it is slightly neater and 
	# I don't like creating temporary files if I can avoid it. Both work well though.
	# 
	### Iterate through each port, adding it to an array if it is found to be inactive
	
	while read port_info
	do
		# Before listing the installed ports, port writes out the line:
		# 
		#   The following ports are currently installed:
		# 
		# Obviously we don't want this in the inactive ports list so we need to discard
		# the first line from $portlist
		if [[ $skip_first_line -ne 1 ]] ; then
			# get the port info, stripping the " (active)" from the end of an active port.
			port_info_stripped="${port_info%% (active)}"
			# get the lengths of the stripped and unstripped port info
			pi_len=`expr "$port_info" : '.*'`
			pi_stripped_len=`expr "$port_info_stripped" : '.*'`
			
			# if the port info lengths don't differ, then no " (active)" was striped. Therefore
			# this is an inactive port, so add its info to the inactive ports list.
			if [[ pi_len -eq pi_stripped_len ]] ; then
				my_echo "${port_info} (inactive)" 1
				my_echo "inactive_port_count is: ${inactive_port_count}" 1
				inactive_port_list[$inactive_port_count]="${port_info}"
				my_echo "inactive_port_list[${inactive_port_count}] is: ${inactive_port_list[$inactive_port_count]}" 1
				let "inactive_port_count += 1"
			else
				my_echo "${port_info}" 1
			fi
		fi
		# now we have skipped the junk first line, clear $skip_first_line
		skip_first_line=0
	done <<< "$portlist"
	
	### Alternate form of loop to deal with problem of a pipe creating a subshell
	# echo "${portlist}" > "/tmp/${UID}/installed.txt"
	# exec 3<> /tmp/${UID}/installed.txt
	# while read port_info <&3
	# do
	#  	port_info_stripped="${port_info%% (active)}"
	#  	pi_len=`expr "$port_info" : '.*'`
	#  	pi_stripped_len=`expr "$port_info_stripped" : '.*'`
	#  	
	#  	if [[ pi_len -eq pi_stripped_len ]] ; then
	#  		echo "${port_info} (inactive)"
	#  		echo "inactive_port_count is: ${inactive_port_count}"
	#  		inactive_port_list[$inactive_port_count]="${port_info}"
	#  		echo "inactive_port_list[${inactive_port_count}] is: ${inactive_port_list[$inactive_port_count]}"
	#  		let "inactive_port_count += 1"
	#  	else
	#  		echo "${port_info}"
	#  	fi
	# done
	# exec 3>&-
	# rm /tmp/${UID}/installed.txt
	
fi # ${#inactive_port_list[*] -eq 0

if [[ $inactive_port_count -gt 0 ]] ; then
	if [[ $CLI_PORT -eq 1 ]] ; then
		# not a command line specified list, so show how many detected
		my_echo "${#inactive_port_list[*]} inactive ports found" 0
	fi
	
	# indicate if only listing
	if [[ $LIST_ONLY -eq 0 ]] ; then
		if [[ $CLI_PORT -eq 1 || VERBOSE -eq 0 ]] ; then
			my_echo "Listing inactive ports..." 0
		fi
	fi
	
	# list/uninstall the inactive ports
 	inactive_port_index=0
	while [ $inactive_port_index -lt $inactive_port_count ]
	do
		# check we aren't listing only
		if [[ $LIST_ONLY -eq 1 ]] ; then
			echo "==> Uninstalling: ${inactive_port_list[$inactive_port_index]}"
			part_count=1
			for part_info in "${inactive_port_list[$inactive_port_index]}"
			do
				cli[$part_count]="${part_info}"
				let "part_count += 1"
			done
			
			echo "sudo port -f uninstall  ${cli[1]} ${cli[2]}"
			echo "sudo port clean --logs --work ${cli[1]}"
		else
			# we are only listing the inactive ports
			if [[ $CLI_PORT -eq 1 || VERBOSE -eq 0 ]] ; then
				# point in doing this if operating on ports specified on the CLI
				echo "    ${inactive_port_list[$inactive_port_index]}"
			fi
		fi
 		let "inactive_port_index += 1"
	done
else
	my_echo "No inactive ports found." 0
fi
